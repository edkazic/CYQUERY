{"name":"CY:QUERY","tagline":"Cypher Query - Cold Fusion support for Cypher and Neo4j Graph DB","body":"CY:QUERY\r\n========\r\n\r\nCypher and Neo4j Graph DB with Cold Fusion\r\n\r\nThis is a Neo4j library for Cold Fusion (tested with Adobe CF and Railo CF servers).\r\n\r\nhttp://www.adobe.com/au/products/coldfusion-enterprise.html\r\n\r\nhttp://www.getrailo.org/ (open source)\r\n\r\nCY:CYPHER is built to support pure REST protocol to push Cypher query to the Neo4j DB server so there is a minimal chance of incompatibilities between Neo4j versions. The returning set is fully Cold Fusion Query object compatible and for data processing user can take the advantage of all standard Cold Fusion features.\r\n\r\nUSAGE\r\n=====\r\n\r\nCreate normal CF project, make sure you have TAGS directory with content from the repository under your project and on the CF page have import function:\r\n\r\n```<cfimport taglib=\"TAGS\" prefix=\"CY\">```\r\n\r\nOptionaly few data parsing functions are available with include:\r\n\r\n```<cfinclude template=\"TAGS/GetData.cfm\">```\r\n\r\n\r\nExecuting Cypher Queries\r\n========================\r\n\r\nCupher query can be executed as simple as:\r\n\r\n```\r\n<CY:QUERY name=\"Cnt\">\r\n\tMATCH (n) //comment is supported as well\r\n\tRETURN count(n) as NodeCount\r\n</CY:QUERY>\r\n```\r\n\r\nThe \"name\" is compulsory attribute for CY:QUERY and it is used as a reference to returned Cold Fusion object.\r\nThe returned result set will be formatted in CF Query object and result of this query can be retrieved with:\r\n\r\n```\r\n#Cnt.NodeCount#\r\n```\r\n\r\nAnother attribute (optional) is returnFormat=\"JSON\" in case you need to return JSON object instead of the CF object.\r\n\r\nIn addition variables CYErrors and CYExecutionTime are returned as well as standard CF variables:\r\n\r\n```\r\n#Cnt.RecordCount#\r\n#Cnt.ColumnList#\r\n#Cnt.CurrentRow# (for dynamic parsing eg within LOOP)\r\n```\r\n\r\nExamples\r\n========\r\nWith this distribution there are 6 examples and it is strongly recommended to go through them and learn about hidden gems.\r\n\r\nExample1\r\n========\r\nIn this example we will learn how to create standard movies database.\r\nIn addition there are functions for deleting all data from the DB, examples of CYErrors use to test your CY:QUERY execution, returning object in JSON format as well as analysis of returned data set.\r\n\r\nExample2\r\n========\r\nIn Example 2 we will explore CF object return type for the movies database.\r\n\r\nExample3\r\n========\r\nIn Example 3 we will explore various return data types within CF object and present few ideas for parsing data.\r\n\r\nExample4\r\n========\r\nIn Example 4 we will further improve on parsing data functions and introduce Query of Query applied on CY:QUERY\r\n\r\nExample5\r\n========\r\nThis time we will introduce powerful Query of Query \"linked tables\" feature for two CY:QUERY data sets.\r\n\r\nExample6\r\n========\r\nIn this example we will create DB test nodes (with property) and relations (with property) between them to form a closed chain. It is a demonstration of creating CY:QUERY dynamically (on the fly).\r\n\r\n\r\nLicense and Acknowledgements\r\n============================\r\n\r\nMade available under the MIT License (MIT).\r\n\r\nCopyright Â© Ed Kazic, CTO Radmis Pty Ltd \r\n\r\nwww.radmis.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}