{"name":"CY:QUERY","tagline":"Cypher Query - Cold Fusion support for Cypher and Neo4j Graph DB","body":"CY:QUERY\r\n========\r\n\r\nCypher and Neo4j Graph DB with Cold Fusion\r\n\r\nThis is a Neo4j library for Cold Fusion (tested with Adobe CF and Railo CF servers).\r\n\r\nhttp://www.adobe.com/au/products/coldfusion-enterprise.html\r\n\r\nhttp://www.getrailo.org/ (open source)\r\n\r\nCY:CYPHER is built to support pure REST protocol to push Cypher query to the Neo4j DB server so there is a minimal chance of incompatibilities between Neo4j versions. The returning set is fully Cold Fusion Query object compatible and for data processing user can take the advantage of all standard Cold Fusion features.\r\n\r\nUSAGE\r\n=====\r\n\r\nCreate normal CF project, make sure you have TAGS directory with content from the repository under your project and on the CF page have import function:\r\n\r\n```<cfimport taglib=\"TAGS\" prefix=\"CY\">```\r\n\r\nOptionaly few data parsing functions are available with include:\r\n\r\n```<cfinclude template=\"TAGS/GetData.cfm\">```\r\n\r\n\r\nExecuting Cypher Queries\r\n========================\r\n\r\nCupher query can be executed as simple as:\r\n\r\n```\r\n<CY:QUERY name=\"Cnt\">\r\n\tMATCH (n) //comment is supported as well\r\n\tRETURN count(n) as NodeCount\r\n</CY:QUERY>\r\n```\r\n\r\nThe \"name\" is compulsory attribute for CY:QUERY and it is used as a reference to returned Cold Fusion object.\r\nThe returned result set will be formatted in CF Query object and result of this query can be retrieved with:\r\n\r\n```\r\n#Cnt.NodeCount#\r\n```\r\n\r\nAnother attribute (optional) is returnFormat=\"JSON\" in case you need to return JSON object instead of the CF object.\r\n\r\nIn addition variables CYErrors and CYExecutionTime are returned as well as standard CF variables:\r\n\r\n```\r\n#CYErrors#\r\n#CYExecutionTime#\r\n#Cnt.RecordCount#\r\n#Cnt.ColumnList#\r\n#Cnt.CurrentRow# (for dynamic parsing eg within LOOP)\r\n```\r\n\r\nExamples\r\n========\r\nWith this distribution there are 6 examples and it is strongly recommended to go through them and learn about hidden gems.\r\n\r\nExample1\r\n========\r\nIn this example we will learn how to create standard movies database.\r\nIn addition there are functions for deleting all data from the DB, examples of CYErrors use to test your CY:QUERY execution, returning object in JSON format as well as analysis of returned data set.\r\n\r\nDelete ALL nodes and ALL relations from the DB\r\n```\r\n\t<CY:QUERY name=\"DeleteAll\">\r\n\t\tMATCH (n)\r\n\t\tOPTIONAL MATCH (n-[r]-())\r\n\t\tDELETE n,r\r\n\t</CY:QUERY>\r\n\r\n\t<CFIF CYErrors NEQ \"\">\r\n\t\t<CFOUTPUT>#CYErrors#</CFOUTPUT>\r\n\t\t<CFABORT>\r\n\t</CFIF>\r\n```\r\n\r\nExample2\r\n========\r\nIn Example 2 we will explore CF object return type for the movies database.\r\n\r\nGet entire content of your Neo4j DB (you would have to remove LIMIT 1000 clause if required)\r\n\r\n```\r\n<CY:QUERY name=\"DumpAll\">\r\n//Match all nodes and relations\r\nMATCH p=(a)-[r]->(b)\r\nRETURN\r\n\tid(a) \t  AS Node1ID,\r\n\tlabels(a) AS Node1Label,\r\n\ta \t  \t  AS Node1Property,\r\n\tid(r) \t  AS RelationID,\r\n\ttype(r)   AS RelationType,\r\n\tr \t  \t  AS RelationProperty,\r\n\tid(b) \t  AS Node2ID,\r\n\tlabels(b) AS Node2Label,\r\n\tb \t  \t  AS Node2Property,\r\n\tp \t      AS Path\r\nLIMIT 1000\r\n\r\n//////////////////////////////////////\r\nUNION\r\n//////////////////////////////////////\r\n\r\n//Match all nodes with no relations\r\nMATCH (n) where not( n--() )\r\nRETURN\r\n\tid(n)\t  AS Node1ID,\r\n\tlabels(n) AS Node1Label,\r\n\tn \t  \t  AS Node1Property,\r\n\tnull \t  AS RelationID,\r\n\tnull \t  AS RelationType,\r\n\tnull \t  AS RelationProperty,\r\n\tnull \t  AS Node2ID,\r\n\tnull \t  AS Node2Label,\r\n\tnull \t  AS Node2Property,\r\n\tnull \t  AS Path\r\nLIMIT 1000\r\n</CY:QUERY>\r\n```\r\n\r\nExample3\r\n========\r\nIn Example 3 we will explore various return data types within CF object and present few ideas for parsing data.\r\n\r\nReturn Data Types\r\n\r\nReturnValueType |ExampleReturnNames |\tValueStructure\r\n--------------- |-------------------|----------------------\r\nid(node) \t|NodeID\t\t    |int\r\nlabels(node) \t|NodeLabel\t    |array of labels\r\nnode \t\t|NodeProperty\t    |structure of properties (a property can be single or an array of values)\r\nid(relation) \t|RelationID\t    |int\r\ntype(relation) \t|RelationType\t    |string\r\nrelation \t|RelationProperty   |structure of properties (a property can be single or an array of values)\r\npath \t\t|Path\t\t    |array of structures: first node structure of properties, relation structure of properties and second node structure of properties\r\n\r\n\r\n\r\n\r\nExample4\r\n========\r\nIn Example 4 we will further improve on parsing data functions and introduce Query of Query applied on CY:QUERY\r\n\r\nExample function for interpreting properties (either Node or Relation)\r\n\r\n```\r\nfunction getProperty(data) {\r\nvar ret=\"\";\r\n\r\n if(isJSON(data))\r\n \t{\r\n\tvar buf=deserializeJSON(data);\r\n\tif(isStruct(buf))\r\n\t   {\r\n\t\tvar list=listToArray(structKeyList(buf));\r\n\t\tfor (j = 1; j <= arrayLen(list); j++)\r\n\t\t\t{\r\n\t\t\tif(isArray(evaluate(\"buf.#list[j]#\")))\r\n\t\t\t\t{\r\n\t\t\t\tvar arr=evaluate(\"buf.#list[j]#\");\r\n\t\t\t\t  \t  for (i = 1; i <= arrayLen(arr); i++)\r\n\t\t\t\t\t\tret = ret & list[j] & ': ' & arr[i] & '<br>';\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t\tret=ret & list[j]  & ': ' & evaluate(\"buf.#list[j]#\") & '<br>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\nreturn ret;\r\n}\r\n</cfscript>\r\n```\r\n\r\nExample5\r\n========\r\nThis time we will introduce powerful Query of Query \"linked tables\" feature for two CY:QUERY data sets.\r\n\r\nCF Query where two retrieved CY:QUERY sets (CYNodesOut and CYNodesIn) are linked by RelationID and resulting set sorted by the age of the actor.\r\n\r\n```\r\n<CFQUERY name=\"DumpAll\" dbtype = \"query\">\r\nSELECT \tCYNodesOut.NodeID    \tAS Node1ID,\r\n\tCYNodesOut.NodeLabel \t    AS Node1Label,\r\n\tCYNodesOut.NodeProperty\t    AS Node1Property,\r\n\tCYNodesOut.RelationID\t    AS RelationID,\r\n\tCYNodesOut.RelationType\t    AS RelationType,\r\n\tCYNodesOut.RelationProperty AS RelationProperty,\r\n\tCYNodesIn.NodeID \t        AS Node2ID,\r\n\tCYNodesIn.NodeLabel \t    AS Node2Label,\r\n\tCYNodesIn.NodeProperty\t    AS Node2Property,\r\n\tCYNodesOut.Born\t\t        AS Born\r\nFROM CYNodesOut, CYNodesIn\r\nWHERE CYNodesOut.RelationID=CYNodesIn.RelationID\r\nORDER BY Born DESC\r\n</CFQUERY>\r\n```\r\n\r\nExample6\r\n========\r\nIn this example we will create DB test nodes (with property) and relations (with property) between them to form a closed chain. It is a demonstration of creating CY:QUERY dynamically (on the fly).\r\n\r\nDynamically created CY:QUERY using ColdFusion LOOP. This piece of code will create 900 nodes and 900 relations each with properties in just one dynamically created CY:QUERY and then it will dispay the time it took to create this DB set\r\n\r\n\r\n```\r\n<cfset nodeNo=900>\r\n<cfset nodeStart=1>\r\n\r\n<CFOUTPUT>\r\n<CY:QUERY name=\"nodes\">\r\nCREATE (node#nodeStart#:Node {name:'node#nodeStart#'})    //Create first innitial node\r\n<CFLOOP index=\"x\" from=\"2\" to=\"#nodeNo#\">\r\n\tCREATE (node#x#:Node {name:'node#x#'})    //Create Nodes and\r\n\tCREATE (node#Evaluate(x-1)#)-[:LINKED_TO {Relation: 'link#Evaluate(x-1)#'}]->(node#x#)    //Create Relations nodeNo-1 times\r\n</CFLOOP>\r\nCREATE (node#nodeNo#)-[:LINKED_TO {Relation:'link#nodeNo#'}]->(node#NodeStart#)    //Create last node relation to close the chain with the first node\r\n</CY:QUERY>\r\n\r\nCreate Time: #CYExecutionTime# sec\r\n</CFOUTPUT>\r\n```\r\n\r\n\r\nLicense and Acknowledgements\r\n============================\r\n\r\nMade available under the MIT License (MIT).\r\n\r\nCopyright Â© Ed Kazic, CTO Radmis Pty Ltd \r\n\r\nwww.radmis.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}